
; Basic listing generator, which shows generated bytes next to offsets in the output file.
; The listing is stored in a file with .LST extension.

; In addition to file offsets it can also show memory addresses, limited to the constant term
; if an address is a linear polynomial. To enable this option add the following line:
;	Listing.ShowAddresses = 1

define Listing

namespace Listing
	offset = $%
	address = 0 scaleof $
	virtual at 0
		HexDigits:: db '0123456789ABCDEF'
	end virtual
	virtual as 'lst'
		Text::
	end virtual
end namespace

macro Listing.process line&
	namespace Listing
		undefined_bytes = $% - $%%
		defined_bytes = $%% - offset
		offset = $%
		virtual Text
			if defined ShowAddresses & ShowAddresses
				db '['
				repeat 16
					load digit:byte from HexDigits:(address shr ((%%-%) shl 2)) and 0Fh
					db digit
				end repeat
				db '] '
			end if
			if defined_bytes > 0
				repeat 8
					load digit:byte from HexDigits:(($%-undefined_bytes-defined_bytes) shr ((%%-%) shl 2)) and 0Fh
					db digit
				end repeat
				db ': '
			else
				db 10 dup ' '
			end if
		end virtual
		address = 0 scaleof $
		column = 0
		source = `line
		while defined_bytes > 0
			load data:byte from : $% - undefined_bytes - defined_bytes
			virtual Text
				if column = 8
					column = 0
					db ' ',source,13,10,8+2 dup ' '
					if defined ShowAddresses & ShowAddresses
						db 16+3 dup ' '
					end if
					source = ''
				end if
				load digit:byte from HexDigits:data shr 4
				db digit
				load digit:byte from HexDigits:data and 0Fh
				db digit,' '
			end virtual
			defined_bytes = defined_bytes - 1
			column = column + 1
		end while
		virtual Text
			repeat 8-column
				db '   '
			end repeat
			db ' ',source,13,10
		end virtual
	end namespace
end macro

macro ? line&
	line
	Listing.process line
end macro