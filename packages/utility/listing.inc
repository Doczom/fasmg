
; Listing generator, which shows generated bytes next to offset in the output file
; and assumed address in memory (limited to the constant term if an address is a linear polynomial).
; The listing is stored in a file with .LST extension.

define Listing

namespace Listing
	element ?1
	element ?2
	element ?3
	virtual at 0
		HexDigits:: db '0123456789ABCDEF'
	end virtual
	offset = $%
end namespace

postpone ?
	purge ?
	namespace Listing
		virtual as 'lst'
			source = 0
			irpv object, collection
				$% = string object scale 2
				$%% = string object scale 3
				if source
					undefined_bytes = $% - $%%
					defined_bytes = $%% - offset
					offset = $%
					db '['
					repeat 16
						load digit:byte from HexDigits:($ shr ((%%-%) shl 2)) and 0Fh
						db digit
					end repeat
					db '] '
					if defined_bytes > 0
						repeat 8
							load digit:byte from HexDigits:(($%-undefined_bytes-defined_bytes) shr ((%%-%) shl 2)) and 0Fh
							db digit
						end repeat
						db ': '
					else
						db 10 dup ' '
					end if
					column = 0
					while defined_bytes > 0
						load data:byte from : $% - undefined_bytes - defined_bytes
						if column = 8
							column = 0
							db ' ',source,13,10,8+2+16+3 dup ' '
							source = ''
						end if
						load digit:byte from HexDigits:data shr 4
						db digit
						load digit:byte from HexDigits:data and 0Fh
						db digit,' '
						defined_bytes = defined_bytes - 1
						column = column + 1
					end while
					repeat 8-column
						db '   '
					end repeat
					db ' ',source,13,10
				end if
				source = string object scale 0
				$ = object scale 1
			end irpv
		end virtual
	end namespace
end postpone

macro ? line&
	Listing.collection =: `line + Listing.1*($ scale 0) + Listing.2*$% + Listing.3*$%%
	line
end macro

macro restartout?
	while defined Listing.collection
		restore Listing.collection
	end while
end macro